// Generated from MyLang.g4 by ANTLR 4.13.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class MyLangLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_T__12 = 13, TOKEN_T__13 = 14, 
    TOKEN_T__14 = 15, TOKEN_T__15 = 16, TOKEN_T__16 = 17, TOKEN_T__17 = 18, 
    TOKEN_T__18 = 19, TOKEN_T__19 = 20, TOKEN_T__20 = 21, TOKEN_T__21 = 22, 
    TOKEN_T__22 = 23, TOKEN_T__23 = 24, TOKEN_T__24 = 25, TOKEN_T__25 = 26, 
    TOKEN_T__26 = 27, TOKEN_T__27 = 28, TOKEN_T__28 = 29, TOKEN_T__29 = 30, 
    TOKEN_T__30 = 31, TOKEN_BooleanLiteral = 32, TOKEN_IntegerLiteral = 33, 
    TOKEN_FloatLiteral = 34, TOKEN_StringLiteral = 35, TOKEN_FileLiteral = 36, 
    TOKEN_Identifier = 37, TOKEN_WS = 38, TOKEN_COMMENT = 39;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'T__16', 
    'T__17', 'T__18', 'T__19', 'T__20', 'T__21', 'T__22', 'T__23', 'T__24', 
    'T__25', 'T__26', 'T__27', 'T__28', 'T__29', 'T__30', 'BooleanLiteral', 
    'IntegerLiteral', 'FloatLiteral', 'StringLiteral', 'FileLiteral', 'Identifier', 
    'WS', 'COMMENT'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "';'", "','", "'read'", "'write'", "'fwrite'", "'if'", "'('", 
      "')'", "'else'", "'while'", "'{'", "'}'", "'='", "'||'", "'&&'", "'=='", 
      "'!='", "'<'", "'>'", "'+'", "'-'", "'.'", "'*'", "'/'", "'%'", "'!'", 
      "'int'", "'float'", "'bool'", "'string'", "'file'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, null, null, null, null, null, null, "BooleanLiteral", 
      "IntegerLiteral", "FloatLiteral", "StringLiteral", "FileLiteral", 
      "Identifier", "WS", "COMMENT"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  MyLangLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'MyLang.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,39,245,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
      2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,1,1,1,
      1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
      4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
      1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
      1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
      20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
      1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
      29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
      1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,192,8,31,1,32,4,32,195,8,32,
      11,32,12,32,196,1,33,4,33,200,8,33,11,33,12,33,201,1,33,1,33,4,33,
      206,8,33,11,33,12,33,207,1,34,1,34,5,34,212,8,34,10,34,12,34,215,9,
      34,1,34,1,34,1,35,1,35,1,36,1,36,5,36,223,8,36,10,36,12,36,226,9,36,
      1,37,4,37,229,8,37,11,37,12,37,230,1,37,1,37,1,38,1,38,1,38,1,38,5,
      38,239,8,38,10,38,12,38,242,9,38,1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,
      9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
      33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
      55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
      77,39,1,0,6,1,0,48,57,3,0,10,10,13,13,34,34,2,0,65,90,97,122,3,0,48,
      57,65,90,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,252,0,1,1,0,0,
      0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
      1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
      0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
      0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
      0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
      0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
      65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
      1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,88,1,
      0,0,0,9,94,1,0,0,0,11,101,1,0,0,0,13,104,1,0,0,0,15,106,1,0,0,0,17,
      108,1,0,0,0,19,113,1,0,0,0,21,119,1,0,0,0,23,121,1,0,0,0,25,123,1,
      0,0,0,27,125,1,0,0,0,29,128,1,0,0,0,31,131,1,0,0,0,33,134,1,0,0,0,
      35,137,1,0,0,0,37,139,1,0,0,0,39,141,1,0,0,0,41,143,1,0,0,0,43,145,
      1,0,0,0,45,147,1,0,0,0,47,149,1,0,0,0,49,151,1,0,0,0,51,153,1,0,0,
      0,53,155,1,0,0,0,55,159,1,0,0,0,57,165,1,0,0,0,59,170,1,0,0,0,61,177,
      1,0,0,0,63,191,1,0,0,0,65,194,1,0,0,0,67,199,1,0,0,0,69,209,1,0,0,
      0,71,218,1,0,0,0,73,220,1,0,0,0,75,228,1,0,0,0,77,234,1,0,0,0,79,80,
      5,59,0,0,80,2,1,0,0,0,81,82,5,44,0,0,82,4,1,0,0,0,83,84,5,114,0,0,
      84,85,5,101,0,0,85,86,5,97,0,0,86,87,5,100,0,0,87,6,1,0,0,0,88,89,
      5,119,0,0,89,90,5,114,0,0,90,91,5,105,0,0,91,92,5,116,0,0,92,93,5,
      101,0,0,93,8,1,0,0,0,94,95,5,102,0,0,95,96,5,119,0,0,96,97,5,114,0,
      0,97,98,5,105,0,0,98,99,5,116,0,0,99,100,5,101,0,0,100,10,1,0,0,0,
      101,102,5,105,0,0,102,103,5,102,0,0,103,12,1,0,0,0,104,105,5,40,0,
      0,105,14,1,0,0,0,106,107,5,41,0,0,107,16,1,0,0,0,108,109,5,101,0,0,
      109,110,5,108,0,0,110,111,5,115,0,0,111,112,5,101,0,0,112,18,1,0,0,
      0,113,114,5,119,0,0,114,115,5,104,0,0,115,116,5,105,0,0,116,117,5,
      108,0,0,117,118,5,101,0,0,118,20,1,0,0,0,119,120,5,123,0,0,120,22,
      1,0,0,0,121,122,5,125,0,0,122,24,1,0,0,0,123,124,5,61,0,0,124,26,1,
      0,0,0,125,126,5,124,0,0,126,127,5,124,0,0,127,28,1,0,0,0,128,129,5,
      38,0,0,129,130,5,38,0,0,130,30,1,0,0,0,131,132,5,61,0,0,132,133,5,
      61,0,0,133,32,1,0,0,0,134,135,5,33,0,0,135,136,5,61,0,0,136,34,1,0,
      0,0,137,138,5,60,0,0,138,36,1,0,0,0,139,140,5,62,0,0,140,38,1,0,0,
      0,141,142,5,43,0,0,142,40,1,0,0,0,143,144,5,45,0,0,144,42,1,0,0,0,
      145,146,5,46,0,0,146,44,1,0,0,0,147,148,5,42,0,0,148,46,1,0,0,0,149,
      150,5,47,0,0,150,48,1,0,0,0,151,152,5,37,0,0,152,50,1,0,0,0,153,154,
      5,33,0,0,154,52,1,0,0,0,155,156,5,105,0,0,156,157,5,110,0,0,157,158,
      5,116,0,0,158,54,1,0,0,0,159,160,5,102,0,0,160,161,5,108,0,0,161,162,
      5,111,0,0,162,163,5,97,0,0,163,164,5,116,0,0,164,56,1,0,0,0,165,166,
      5,98,0,0,166,167,5,111,0,0,167,168,5,111,0,0,168,169,5,108,0,0,169,
      58,1,0,0,0,170,171,5,115,0,0,171,172,5,116,0,0,172,173,5,114,0,0,173,
      174,5,105,0,0,174,175,5,110,0,0,175,176,5,103,0,0,176,60,1,0,0,0,177,
      178,5,102,0,0,178,179,5,105,0,0,179,180,5,108,0,0,180,181,5,101,0,
      0,181,62,1,0,0,0,182,183,5,116,0,0,183,184,5,114,0,0,184,185,5,117,
      0,0,185,192,5,101,0,0,186,187,5,102,0,0,187,188,5,97,0,0,188,189,5,
      108,0,0,189,190,5,115,0,0,190,192,5,101,0,0,191,182,1,0,0,0,191,186,
      1,0,0,0,192,64,1,0,0,0,193,195,7,0,0,0,194,193,1,0,0,0,195,196,1,0,
      0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,66,1,0,0,0,198,200,7,0,0,0,
      199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,
      203,1,0,0,0,203,205,5,46,0,0,204,206,7,0,0,0,205,204,1,0,0,0,206,207,
      1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,68,1,0,0,0,209,213,5,34,
      0,0,210,212,8,1,0,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,
      0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,5,34,0,0,
      217,70,1,0,0,0,218,219,3,69,34,0,219,72,1,0,0,0,220,224,7,2,0,0,221,
      223,7,3,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,
      1,0,0,0,225,74,1,0,0,0,226,224,1,0,0,0,227,229,7,4,0,0,228,227,1,0,
      0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,
      0,232,233,6,37,0,0,233,76,1,0,0,0,234,235,5,47,0,0,235,236,5,47,0,
      0,236,240,1,0,0,0,237,239,8,5,0,0,238,237,1,0,0,0,239,242,1,0,0,0,
      240,238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,
      244,6,38,0,0,244,78,1,0,0,0,9,0,191,196,201,207,213,224,230,240,1,
      6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}